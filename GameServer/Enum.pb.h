// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum PlayerStateType : int {
  PLAYER_IDLE = 0,
  PLAYER_MOVE = 1,
  PLAYER_DEAD = 2,
  PLAYER_ESCAPE = 3,
  PlayerStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerStateType_IsValid(int value);
constexpr PlayerStateType PlayerStateType_MIN = PLAYER_IDLE;
constexpr PlayerStateType PlayerStateType_MAX = PLAYER_ESCAPE;
constexpr int PlayerStateType_ARRAYSIZE = PlayerStateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerStateType_descriptor();
template<typename T>
inline const std::string& PlayerStateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerStateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerStateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerStateType_descriptor(), enum_t_value);
}
inline bool PlayerStateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerStateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerStateType>(
    PlayerStateType_descriptor(), name, value);
}
enum Role : int {
  ROLE_UNSPECIFIED = 0,
  ROLE_BOSS = 1,
  ROLE_SURVIVOR = 2,
  Role_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Role_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Role_IsValid(int value);
constexpr Role Role_MIN = ROLE_UNSPECIFIED;
constexpr Role Role_MAX = ROLE_SURVIVOR;
constexpr int Role_ARRAYSIZE = Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Role_descriptor();
template<typename T>
inline const std::string& Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Role_descriptor(), enum_t_value);
}
inline bool Role_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Role>(
    Role_descriptor(), name, value);
}
enum EscapeType : int {
  ESCAPE_DEAD = 0,
  ESCAPE_EXIT_DOOR = 1,
  ESCAPE_HATCH = 2,
  EscapeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EscapeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EscapeType_IsValid(int value);
constexpr EscapeType EscapeType_MIN = ESCAPE_DEAD;
constexpr EscapeType EscapeType_MAX = ESCAPE_HATCH;
constexpr int EscapeType_ARRAYSIZE = EscapeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EscapeType_descriptor();
template<typename T>
inline const std::string& EscapeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EscapeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EscapeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EscapeType_descriptor(), enum_t_value);
}
inline bool EscapeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EscapeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EscapeType>(
    EscapeType_descriptor(), name, value);
}
enum ErrorCode : int {
  ERROR_NONE = 0,
  ERROR_INVALID_CREDENTIALS = 1,
  ERROR_SERVER_FULL = 2,
  ERROR_UNKNOWN_ERROR = 99,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = ERROR_NONE;
constexpr ErrorCode ErrorCode_MAX = ERROR_UNKNOWN_ERROR;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum ActorRole : int {
  PLAYER = 0,
  AI = 1,
  ENVIRONMENT = 2,
  ActorRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ActorRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ActorRole_IsValid(int value);
constexpr ActorRole ActorRole_MIN = PLAYER;
constexpr ActorRole ActorRole_MAX = ENVIRONMENT;
constexpr int ActorRole_ARRAYSIZE = ActorRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorRole_descriptor();
template<typename T>
inline const std::string& ActorRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActorRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActorRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActorRole_descriptor(), enum_t_value);
}
inline bool ActorRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActorRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActorRole>(
    ActorRole_descriptor(), name, value);
}
enum BossType : int {
  BOSS_NONE = 0,
  BOSS_PEANUT = 1,
  BOSS_VOMIT = 2,
  BOSS_PROTEIN = 3,
  BossType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BossType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BossType_IsValid(int value);
constexpr BossType BossType_MIN = BOSS_NONE;
constexpr BossType BossType_MAX = BOSS_PROTEIN;
constexpr int BossType_ARRAYSIZE = BossType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BossType_descriptor();
template<typename T>
inline const std::string& BossType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BossType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BossType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BossType_descriptor(), enum_t_value);
}
inline bool BossType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BossType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BossType>(
    BossType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::PlayerStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PlayerStateType>() {
  return ::Protocol::PlayerStateType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Role>() {
  return ::Protocol::Role_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EscapeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EscapeType>() {
  return ::Protocol::EscapeType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ErrorCode>() {
  return ::Protocol::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ActorRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ActorRole>() {
  return ::Protocol::ActorRole_descriptor();
}
template <> struct is_proto_enum< ::Protocol::BossType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::BossType>() {
  return ::Protocol::BossType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
