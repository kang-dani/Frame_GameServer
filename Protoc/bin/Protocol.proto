syntax = "proto3";
package Protocol;

import "Enum.proto";
import "Struct.proto";

// 로그인 요청
message LoginRequest {
    string userNickname = 1;    // 로그인 요청 시 클라이언트에서 보낼 것
}

// 로그인 응답
message LoginResponse {
    bool success = 1;          // 성공 여부
    string error_message = 2;  // 실패 시 에러 메시지
    uint32 playerID = 3;        // 플레이어 아이디 반환 
    string userNickname = 4;
}

// 방 생성 요청
message CreateRoomRequest {
}

// 방 생성 응답
message CreateRoomResponse {
  bool success = 1;
  string error = 2;
  uint32 roomId = 3;
}

// 방 목록 조회 요청 (클라이언트에서 로비 진입 시)
message ListRoomsRequest {}

// 방 목록 조회 응답
message ListRoomsResponse {
  repeated RoomInfo rooms = 1;
}

// 방 입장 요청
message JoinRoomRequest {
  uint32 playerId = 1;
  uint32 roomId   = 2;
}

// 방 입장 응답
message JoinRoomResponse {
  bool success = 1;
  string error = 2;
  RoomInfo room = 3;
}

// 방 정보
message RoomInfo {
  uint32 roomId         = 1;
  uint32 creatorId      = 2;  // 방 생성자 ID
  string creatorName    = 3;  // 방 생성자 닉네임
  uint32 currentCount   = 4;
  uint32 maxCount       = 5;
  repeated PlayerInfo players = 6;
}

// 플레이어 정보 (이미 정의된 Player 메시지 대신 간단히)
message PlayerInfo {
  uint32 playerId = 1;
  string nickname = 2;
}

message PlayersUpdate {
  // key: playerId, value: PlayerInfo(=Player 메시지)
  map<uint32, PlayerInfo> players = 1;
}

// --- 로비 준비 관리 ---

// 클라이언트 → 서버: 플레이어 준비 상태 전송
message PlayerReadyRequest {
  bool isReady   = 2;
}

// 플레이어별 준비 상태
message ReadyInfo {
  uint32 playerId = 1;  // 플레이어 식별자
  bool   isReady   = 2; // 해당 플레이어 준비 상태
}

// 서버 → 클라이언트: 모든 플레이어의 현재 준비 상태 브로드캐스트
message PlayerReadyResponse {
  uint32      roomId = 1;        // 추가: 어느 방의 상태인지
  repeated ReadyInfo players = 4; // 준비 상태 리스트
}

// 서버 → 클라이언트: 모두 준비됐을 때 게임 시작 통보
message GameStartNotification {
  uint32 roomId = 1;                     // 어느 방이 시작됐는지
  repeated PlayerInfo players = 2;       // 방 안의 플레이어 목록
  repeated Role playerRoles = 3;        // 각 플레이어의 역할
  BossType boss_type = 4;               // 보스 타입
}

// 플레이어 역할 할당용 메시지
message PlayerRole {
  uint32     playerId = 1;
  ActorRole  role     = 2;  // Enum.proto 에서 정의된 ActorRole
}

// --- 초기화 메시지 ---
message PlayerFullStateRequest {
  uint32         playerId              = 1;
  repeated bool  life                  = 2;   // 살아있는지 여부 (인덱스별)
  repeated bool  deathPlayer           = 3;   // 죽었는지 여부 (인덱스별)
  string         nickname              = 4;
  Vector3        position              = 5;   // 플레이어 위치
  Vector3        scale				   = 6;   // 플레이어 스케일

  int32          facingDirX            = 9;   // -1=왼쪽, 1=오른쪽
  int32          facingDirY            = 10;  // -1=아래, 1=위

  bool            isJailed             = 11;  // 감옥 여부 (인덱스별)
  PlayerStateType stateType			   = 12;  // 현재 상태 (Enum.proto 에서 정의된 stateType)
  bool            successGenerator      = 13;  // 발전기 성공 플래그

  bool           miniGameSuccess       = 14;
  string         escapeMessage         = 15;

  float          alphaPlayer           = 16;  // 화면 알파
  bool           miniGameSparkle       = 17;

  EscapeType     escapeCode            = 18;  // 탈출 타입(enum)

  bool           hasUpgradedFlashlight = 19;
  bool           isLoading             = 20;
  uint32         characterChoice       = 21;

  bool           isBoss                = 22;  // 보스 여부
  BossType       bossType              = 23;  // 보스 타입 (Enum.proto 에서 정의된 BossType)
}

// 발전기 초기 상태
message InitGeneratorStateRequest {
  uint32        generatorId  = 1;
  TransformData transform    = 2;
  bool          isActivated  = 3;
  bool          isSparkling  = 4;
  bool          isDone       = 5;
  uint32        generatorsGage = 6;
}

// 미니게임 초기 상태
message InitMiniGameStateRequest {
  uint32        miniGameId   = 1;
  TransformData transform    = 2;
  bool          isCleared    = 3;
  bool          isSparkling  = 4;
}

// 월드 초기 상태 (클라이언트가 씬입장 시 서버→클라 전송)
message InitWorldStateRequest {
  repeated PlayerFullStateRequest    players    = 1;
  repeated InitGeneratorStateRequest generators = 2;
  repeated InitMiniGameStateRequest  miniGames  = 3;
}

// --------------------------------------------------
// 2) 변경분만 보내는 델타 메시지
// --------------------------------------------------

// 플레이어 상태 업데이트 (Optional 필드는 변경된 경우에만 포함)
message UpdatePlayerState {
  uint32                   playerId       = 1;
  optional TransformData transform      = 2;
  optional string        stateAnimation = 3;
  optional PlayerStateType stateType  = 4;
  optional bool          isJailed     = 5;
  optional bool          flashlightOn = 6;
  optional bool          isLoading    = 7;
  optional bool          miniGameSuccess = 8;
  optional EscapeType    escapeCode   = 9;
  optional float         alphaPlayer  = 10;
  optional bool          miniGameSparkle = 11;
  optional int32         facingDirX   = 12;
  optional int32         facingDirY   = 13;
  optional bool          isBoss      = 14;  // 보스 여부
  optional BossType      bossType    = 15;  // 보스 타입 (Enum.proto 에서 정의된 BossType)
}

// 발전기 상태 업데이트
message UpdateGeneratorState {
  uint32    generatorId        = 1;
  optional bool isActivated    = 2;
  optional bool isSparkling    = 3;
  optional uint32 generatorsGage = 4;
}

// 미니게임 상태 업데이트
message UpdateMiniGameState {
  uint32    miniGameId         = 1;
  optional bool isCleared      = 2;
  optional bool isSparkling    = 3;
}

// 월드 델타 브로드캐스트
message WorldStateDelta {
  repeated UpdatePlayerState    playerUpdates    = 1;
  repeated UpdateGeneratorState generatorUpdates = 2;
  repeated UpdateMiniGameState  miniUpdates      = 3;
}

// --- 플레이어 입력 (이동) 요청 ---
message PlayerMoveRequest {
  uint32 actorId      = 1;
  Vector3 newPosition = 2;
  Vector3 rotation    = 3;
}

// --- 채팅 ---

// 채팅 메시지 요청
message ChatRequest {
    uint32 sender_id = 1;      // 발신자 ID
    string message = 2;        // 메시지 내용
}

// 채팅 메시지 응답
message ChatResponse {
    uint32 sender_id = 1;      // 발신자 ID
    string message = 2;        // 메시지 내용
}